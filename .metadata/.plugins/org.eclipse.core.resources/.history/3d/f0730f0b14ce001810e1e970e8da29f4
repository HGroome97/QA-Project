package com.qa.TheInfiniteTerrainSystem;

import java.util.Scanner;
import java.util.concurrent.*;

public class Game {
	private Scanner scanner;
	private String[][] gameMap = { { "0", "0", "Giant Frog" }, { "0", "1", " Frog" }, { "0", "2", "Swamp" },
			{ "0", "3", "Giant Frog" }, { "0", "4", "Giant Frog" }, { "0", "5", "Giant Frog" },
			{ "1", "0", "Giant Frog" }, { "1", "1", "Giant Frog" }, { "1", "2", "Giant Frog" },
			{ "1", "3", "Giant Frog" }, { "1", "4", "Giant Frog" }, { "1", "5", "Giant Frog" },
			{ "2", "0", "Giant Frog" }, { "2", "1", "Giant Frog" }, { "2", "2", "Giant Frog" },
			{ "2", "3", "Giant Frog" }, { "2", "4", "Giant Frog" }, { "2", "5", "Giant Frog" },
			{ "3", "0", "Giant Frog" }, { "3", "1", "Giant Frog" }, { "3", "2", "Giant Frog" },
			{ "3", "3", "Giant Frog" }, { "3", "4", "Giant Frog" }, { "3", "5", "Giant Frog" },
			{ "4", "0", "Giant Frog" }, { "4", "1", "Giant Frog" }, { "4", "2", "Giant Frog" },
			{ "4", "3", "Giant Frog" }, { "4", "4", "Treasure" }, { "4", "5", "Giant Frog" },
			{ "5", "0", "Giant Frog" }, { "5", "1", "Giant Frog" }, { "5", "2", "Giant Frog" },
			{ "5", "3", "Giant Frog" }, { "5", "4", "Giant Frog" }, { "5", "5", "Giant Frog" }, };;
	private int[] currentPosition = new int[2];

	public Game() {
		int randomX;
		int randomY;
		loop: for (int i = 0; i < 100; i++) {
			randomX = ThreadLocalRandom.current().nextInt(0, 6);
			randomY = ThreadLocalRandom.current().nextInt(0, 6);
			if (randomX != 4 && randomY != 4) {
				currentPosition[0] = randomX;
				currentPosition[1] = randomY;
				break loop;
			}
		}
		moveInput();
	}

	public void moveInput() {
		scanner = new Scanner(System.in);
		System.out.println("Current Position: x: " + currentPosition[0] + ", y: " + currentPosition[1]);
		System.out.print("Enter your next move:");
		String move = scanner.nextLine();
		move(move);
	}

	public void move(String moveInput) {
		switch (moveInput.trim().toLowerCase()) {
		case "north":
			currentPosition[0]--;
			break;
		case "south":
			currentPosition[0]++;
			break;
		case "west":
			currentPosition[1]--;
			break;
		case "east":
			currentPosition[1]++;
			break;
		default:
			System.out.println("Invalid Move");
			break;
		}
		updateDetails();
	}

	public void updateDetails() {
		for (int i = 0; i < 36; i++) {
			if (currentPosition[0] == Integer.valueOf(gameMap[i][0])){
					if(currentPosition[1] == Integer.valueOf(gameMap[i][1])) {
						System.out.println(gameMap[i][2]);
					}
			}
		}
		moveInput();
	}

}
